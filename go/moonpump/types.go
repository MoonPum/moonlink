// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package moonpump

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type BuyParams struct {
	AmountIn         uint64
	MinimumAmountOut uint64
}

func (obj BuyParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BuyParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

type GrudateParams struct {
	Nonce    uint8
	OpenTime uint64
}

func (obj GrudateParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `OpenTime` param:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GrudateParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return err
	}
	return nil
}

type InitializeParams struct {
	TradeFeeBasisPoints *uint16 `bin:"optional"`
}

func (obj InitializeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeBasisPoints` param (optional):
	{
		if obj.TradeFeeBasisPoints == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TradeFeeBasisPoints)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *InitializeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeBasisPoints` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TradeFeeBasisPoints)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type PumpParams struct {
	Name   string
	Ticker string
	Uri    string
}

func (obj PumpParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Ticker` param:
	err = encoder.Encode(obj.Ticker)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PumpParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Ticker`:
	err = decoder.Decode(&obj.Ticker)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

type SellParams struct {
	AmountIn         uint64
	MinimumAmountOut uint64
}

func (obj SellParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SellParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

type TransferOwnershipParams struct {
	NewAdmin ag_solanago.PublicKey
}

func (obj TransferOwnershipParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewAdmin` param:
	err = encoder.Encode(obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransferOwnershipParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewAdmin`:
	err = decoder.Decode(&obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

type UpdateConfigParams struct {
	FeeRecipient        *ag_solanago.PublicKey `bin:"optional"`
	Operator            *ag_solanago.PublicKey `bin:"optional"`
	TradeFeeBasisPoints *uint16                `bin:"optional"`
}

func (obj UpdateConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeRecipient` param (optional):
	{
		if obj.FeeRecipient == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FeeRecipient)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Operator` param (optional):
	{
		if obj.Operator == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Operator)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TradeFeeBasisPoints` param (optional):
	{
		if obj.TradeFeeBasisPoints == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TradeFeeBasisPoints)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *UpdateConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeRecipient` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FeeRecipient)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Operator` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Operator)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TradeFeeBasisPoints` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TradeFeeBasisPoints)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Status ag_binary.BorshEnum

const (
	StatusLaunched Status = iota
	StatusCompleted
	StatusGraduated
)

func (value Status) String() string {
	switch value {
	case StatusLaunched:
		return "Launched"
	case StatusCompleted:
		return "Completed"
	case StatusGraduated:
		return "Graduated"
	default:
		return ""
	}
}
