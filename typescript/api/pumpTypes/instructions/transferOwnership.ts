/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  TransferOwnershipParams,
  transferOwnershipParamsBeet,
} from '../types/TransferOwnershipParams'

/**
 * @category Instructions
 * @category TransferOwnership
 * @category generated
 */
export type TransferOwnershipInstructionArgs = {
  params: TransferOwnershipParams
}
/**
 * @category Instructions
 * @category TransferOwnership
 * @category generated
 */
export const transferOwnershipStruct = new beet.BeetArgsStruct<
  TransferOwnershipInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', transferOwnershipParamsBeet],
  ],
  'TransferOwnershipInstructionArgs'
)
/**
 * Accounts required by the _transferOwnership_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] config
 * @category Instructions
 * @category TransferOwnership
 * @category generated
 */
export type TransferOwnershipInstructionAccounts = {
  admin: web3.PublicKey
  config: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const transferOwnershipInstructionDiscriminator = [
  65, 177, 215, 73, 53, 45, 99, 47,
]

/**
 * Creates a _TransferOwnership_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category TransferOwnership
 * @category generated
 */
export function createTransferOwnershipInstruction(
  accounts: TransferOwnershipInstructionAccounts,
  args: TransferOwnershipInstructionArgs,
  programId = new web3.PublicKey('DrcCNopZABtZev6WkiBDsrwPfbJAcexx5jnVDZ7egLmS')
) {
  const [data] = transferOwnershipStruct.serialize({
    instructionDiscriminator: transferOwnershipInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.config,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
