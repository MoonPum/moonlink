/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * NotAdmin: 'Not admin'
 *
 * @category Errors
 * @category generated
 */
export class NotAdminError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'NotAdmin'
  constructor() {
    super('Not admin')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotAdminError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new NotAdminError())
createErrorFromNameLookup.set('NotAdmin', () => new NotAdminError())

/**
 * InvalidFeeRecipient: 'Invalid vault account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFeeRecipientError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidFeeRecipient'
  constructor() {
    super('Invalid vault account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFeeRecipientError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidFeeRecipientError())
createErrorFromNameLookup.set(
  'InvalidFeeRecipient',
  () => new InvalidFeeRecipientError()
)

/**
 * NotLaunched: 'Mint is not launched status'
 *
 * @category Errors
 * @category generated
 */
export class NotLaunchedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'NotLaunched'
  constructor() {
    super('Mint is not launched status')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotLaunchedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new NotLaunchedError())
createErrorFromNameLookup.set('NotLaunched', () => new NotLaunchedError())

/**
 * NotCompleted: 'Mint is not completed status'
 *
 * @category Errors
 * @category generated
 */
export class NotCompletedError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'NotCompleted'
  constructor() {
    super('Mint is not completed status')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotCompletedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new NotCompletedError())
createErrorFromNameLookup.set('NotCompleted', () => new NotCompletedError())

/**
 * MemeAtaOwnerError: 'Owner of user associated token is error'
 *
 * @category Errors
 * @category generated
 */
export class MemeAtaOwnerErrorError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'MemeAtaOwnerError'
  constructor() {
    super('Owner of user associated token is error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MemeAtaOwnerErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new MemeAtaOwnerErrorError())
createErrorFromNameLookup.set(
  'MemeAtaOwnerError',
  () => new MemeAtaOwnerErrorError()
)

/**
 * MemeAtaMintError: 'Mint of config associated token is error'
 *
 * @category Errors
 * @category generated
 */
export class MemeAtaMintErrorError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'MemeAtaMintError'
  constructor() {
    super('Mint of config associated token is error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MemeAtaMintErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new MemeAtaMintErrorError())
createErrorFromNameLookup.set(
  'MemeAtaMintError',
  () => new MemeAtaMintErrorError()
)

/**
 * InsuffcientMinimumAmountOut: 'Insufficient minimum amount out'
 *
 * @category Errors
 * @category generated
 */
export class InsuffcientMinimumAmountOutError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InsuffcientMinimumAmountOut'
  constructor() {
    super('Insufficient minimum amount out')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsuffcientMinimumAmountOutError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1776,
  () => new InsuffcientMinimumAmountOutError()
)
createErrorFromNameLookup.set(
  'InsuffcientMinimumAmountOut',
  () => new InsuffcientMinimumAmountOutError()
)

/**
 * InvalidCreator: 'Invalid creator'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCreatorError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidCreator'
  constructor() {
    super('Invalid creator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCreatorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidCreatorError())
createErrorFromNameLookup.set('InvalidCreator', () => new InvalidCreatorError())

/**
 * InvalidOperator: 'Invalid operator'
 *
 * @category Errors
 * @category generated
 */
export class InvalidOperatorError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidOperator'
  constructor() {
    super('Invalid operator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidOperatorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidOperatorError())
createErrorFromNameLookup.set(
  'InvalidOperator',
  () => new InvalidOperatorError()
)

/**
 * InsufficientBalance: 'Invalid creator lp token account'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientBalanceError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InsufficientBalance'
  constructor() {
    super('Invalid creator lp token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InsufficientBalanceError())
createErrorFromNameLookup.set(
  'InsufficientBalance',
  () => new InsufficientBalanceError()
)

/**
 * InvalidTokenReserves: 'Invalid token reserves'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenReservesError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidTokenReserves'
  constructor() {
    super('Invalid token reserves')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenReservesError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidTokenReservesError())
createErrorFromNameLookup.set(
  'InvalidTokenReserves',
  () => new InvalidTokenReservesError()
)

/**
 * LessThanMinimumSolBuyAmount: 'Less than minimum sol buy amount'
 *
 * @category Errors
 * @category generated
 */
export class LessThanMinimumSolBuyAmountError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'LessThanMinimumSolBuyAmount'
  constructor() {
    super('Less than minimum sol buy amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LessThanMinimumSolBuyAmountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177b,
  () => new LessThanMinimumSolBuyAmountError()
)
createErrorFromNameLookup.set(
  'LessThanMinimumSolBuyAmount',
  () => new LessThanMinimumSolBuyAmountError()
)

/**
 * MoreThanMinimumAmountIn: 'Less than minimum amount in'
 *
 * @category Errors
 * @category generated
 */
export class MoreThanMinimumAmountInError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'MoreThanMinimumAmountIn'
  constructor() {
    super('Less than minimum amount in')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MoreThanMinimumAmountInError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new MoreThanMinimumAmountInError())
createErrorFromNameLookup.set(
  'MoreThanMinimumAmountIn',
  () => new MoreThanMinimumAmountInError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
