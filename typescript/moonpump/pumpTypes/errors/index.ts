/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * NotAdmin: 'Not admin'
 *
 * @category Errors
 * @category generated
 */
export class NotAdminError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'NotAdmin'
  constructor() {
    super('Not admin')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotAdminError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new NotAdminError())
createErrorFromNameLookup.set('NotAdmin', () => new NotAdminError())

/**
 * NotNewAdmin: 'Not new admin'
 *
 * @category Errors
 * @category generated
 */
export class NotNewAdminError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'NotNewAdmin'
  constructor() {
    super('Not new admin')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotNewAdminError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new NotNewAdminError())
createErrorFromNameLookup.set('NotNewAdmin', () => new NotNewAdminError())

/**
 * InvalidFeeRecipient: 'Invalid vault account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFeeRecipientError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidFeeRecipient'
  constructor() {
    super('Invalid vault account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFeeRecipientError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidFeeRecipientError())
createErrorFromNameLookup.set(
  'InvalidFeeRecipient',
  () => new InvalidFeeRecipientError()
)

/**
 * NotLaunched: 'Mint is not launched status'
 *
 * @category Errors
 * @category generated
 */
export class NotLaunchedError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'NotLaunched'
  constructor() {
    super('Mint is not launched status')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotLaunchedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new NotLaunchedError())
createErrorFromNameLookup.set('NotLaunched', () => new NotLaunchedError())

/**
 * NotCompleted: 'Mint is not completed status'
 *
 * @category Errors
 * @category generated
 */
export class NotCompletedError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'NotCompleted'
  constructor() {
    super('Mint is not completed status')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotCompletedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new NotCompletedError())
createErrorFromNameLookup.set('NotCompleted', () => new NotCompletedError())

/**
 * MintAddressError: 'mint address is error'
 *
 * @category Errors
 * @category generated
 */
export class MintAddressErrorError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'MintAddressError'
  constructor() {
    super('mint address is error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintAddressErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new MintAddressErrorError())
createErrorFromNameLookup.set(
  'MintAddressError',
  () => new MintAddressErrorError()
)

/**
 * UserAtaOwnerError: 'Owner of user associated token is error'
 *
 * @category Errors
 * @category generated
 */
export class UserAtaOwnerErrorError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'UserAtaOwnerError'
  constructor() {
    super('Owner of user associated token is error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UserAtaOwnerErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new UserAtaOwnerErrorError())
createErrorFromNameLookup.set(
  'UserAtaOwnerError',
  () => new UserAtaOwnerErrorError()
)

/**
 * UserAtaMintError: 'Mint of user associated token is error'
 *
 * @category Errors
 * @category generated
 */
export class UserAtaMintErrorError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'UserAtaMintError'
  constructor() {
    super('Mint of user associated token is error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UserAtaMintErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new UserAtaMintErrorError())
createErrorFromNameLookup.set(
  'UserAtaMintError',
  () => new UserAtaMintErrorError()
)

/**
 * MemeAtaOwnerError: 'Owner of config associated token is error'
 *
 * @category Errors
 * @category generated
 */
export class MemeAtaOwnerErrorError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'MemeAtaOwnerError'
  constructor() {
    super('Owner of config associated token is error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MemeAtaOwnerErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new MemeAtaOwnerErrorError())
createErrorFromNameLookup.set(
  'MemeAtaOwnerError',
  () => new MemeAtaOwnerErrorError()
)

/**
 * MemeAtaMintError: 'Mint of config associated token is error'
 *
 * @category Errors
 * @category generated
 */
export class MemeAtaMintErrorError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'MemeAtaMintError'
  constructor() {
    super('Mint of config associated token is error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MemeAtaMintErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new MemeAtaMintErrorError())
createErrorFromNameLookup.set(
  'MemeAtaMintError',
  () => new MemeAtaMintErrorError()
)

/**
 * LongName: 'Long name not allowed'
 *
 * @category Errors
 * @category generated
 */
export class LongNameError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'LongName'
  constructor() {
    super('Long name not allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LongNameError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new LongNameError())
createErrorFromNameLookup.set('LongName', () => new LongNameError())

/**
 * LongTicker: 'Long ticker not allowed'
 *
 * @category Errors
 * @category generated
 */
export class LongTickerError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'LongTicker'
  constructor() {
    super('Long ticker not allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LongTickerError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new LongTickerError())
createErrorFromNameLookup.set('LongTicker', () => new LongTickerError())

/**
 * LongURI: 'Long uri not allowed'
 *
 * @category Errors
 * @category generated
 */
export class LongURIError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'LongURI'
  constructor() {
    super('Long uri not allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LongURIError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new LongURIError())
createErrorFromNameLookup.set('LongURI', () => new LongURIError())

/**
 * PermissionError: 'Permission error'
 *
 * @category Errors
 * @category generated
 */
export class PermissionErrorError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'PermissionError'
  constructor() {
    super('Permission error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PermissionErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new PermissionErrorError())
createErrorFromNameLookup.set(
  'PermissionError',
  () => new PermissionErrorError()
)

/**
 * SolNotEqual: 'The balance of Sol is not equal'
 *
 * @category Errors
 * @category generated
 */
export class SolNotEqualError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'SolNotEqual'
  constructor() {
    super('The balance of Sol is not equal')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SolNotEqualError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new SolNotEqualError())
createErrorFromNameLookup.set('SolNotEqual', () => new SolNotEqualError())

/**
 * NotValidSolBalance: 'Not valid sol balance'
 *
 * @category Errors
 * @category generated
 */
export class NotValidSolBalanceError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'NotValidSolBalance'
  constructor() {
    super('Not valid sol balance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotValidSolBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new NotValidSolBalanceError())
createErrorFromNameLookup.set(
  'NotValidSolBalance',
  () => new NotValidSolBalanceError()
)

/**
 * MoreThanTen: 'More than ten'
 *
 * @category Errors
 * @category generated
 */
export class MoreThanTenError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'MoreThanTen'
  constructor() {
    super('More than ten')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MoreThanTenError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new MoreThanTenError())
createErrorFromNameLookup.set('MoreThanTen', () => new MoreThanTenError())

/**
 * InvalidMemeVault: 'Invalid meme vault account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMemeVaultError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'InvalidMemeVault'
  constructor() {
    super('Invalid meme vault account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMemeVaultError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new InvalidMemeVaultError())
createErrorFromNameLookup.set(
  'InvalidMemeVault',
  () => new InvalidMemeVaultError()
)

/**
 * CanNotGradute: 'Can not graduate'
 *
 * @category Errors
 * @category generated
 */
export class CanNotGraduteError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'CanNotGradute'
  constructor() {
    super('Can not graduate')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CanNotGraduteError)
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new CanNotGraduteError())
createErrorFromNameLookup.set('CanNotGradute', () => new CanNotGraduteError())

/**
 * NotBurnMint: 'Should burn mint at first'
 *
 * @category Errors
 * @category generated
 */
export class NotBurnMintError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'NotBurnMint'
  constructor() {
    super('Should burn mint at first')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotBurnMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new NotBurnMintError())
createErrorFromNameLookup.set('NotBurnMint', () => new NotBurnMintError())

/**
 * NotWrapSOL: 'Should wrap sol at first'
 *
 * @category Errors
 * @category generated
 */
export class NotWrapSOLError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'NotWrapSOL'
  constructor() {
    super('Should wrap sol at first')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotWrapSOLError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new NotWrapSOLError())
createErrorFromNameLookup.set('NotWrapSOL', () => new NotWrapSOLError())

/**
 * NotListOnMarket: 'Should list on market at first'
 *
 * @category Errors
 * @category generated
 */
export class NotListOnMarketError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'NotListOnMarket'
  constructor() {
    super('Should list on market at first')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotListOnMarketError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new NotListOnMarketError())
createErrorFromNameLookup.set(
  'NotListOnMarket',
  () => new NotListOnMarketError()
)

/**
 * NotDefined: 'multiplier not defined'
 *
 * @category Errors
 * @category generated
 */
export class NotDefinedError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'NotDefined'
  constructor() {
    super('multiplier not defined')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotDefinedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new NotDefinedError())
createErrorFromNameLookup.set('NotDefined', () => new NotDefinedError())

/**
 * OrderError: 'Order of key of token is not correct'
 *
 * @category Errors
 * @category generated
 */
export class OrderErrorError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'OrderError'
  constructor() {
    super('Order of key of token is not correct')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OrderErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new OrderErrorError())
createErrorFromNameLookup.set('OrderError', () => new OrderErrorError())

/**
 * CreatorError: 'Create account is not matched'
 *
 * @category Errors
 * @category generated
 */
export class CreatorErrorError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'CreatorError'
  constructor() {
    super('Create account is not matched')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CreatorErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1788, () => new CreatorErrorError())
createErrorFromNameLookup.set('CreatorError', () => new CreatorErrorError())

/**
 * InsufficientRentFund: 'Insufficient rent fund'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientRentFundError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'InsufficientRentFund'
  constructor() {
    super('Insufficient rent fund')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientRentFundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1789, () => new InsufficientRentFundError())
createErrorFromNameLookup.set(
  'InsufficientRentFund',
  () => new InsufficientRentFundError()
)

/**
 * InsuffcientMinimumAmountOut: 'Insufficient minimum amount out'
 *
 * @category Errors
 * @category generated
 */
export class InsuffcientMinimumAmountOutError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'InsuffcientMinimumAmountOut'
  constructor() {
    super('Insufficient minimum amount out')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsuffcientMinimumAmountOutError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178a,
  () => new InsuffcientMinimumAmountOutError()
)
createErrorFromNameLookup.set(
  'InsuffcientMinimumAmountOut',
  () => new InsuffcientMinimumAmountOutError()
)

/**
 * InvalidCreator: 'Invalid creator'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCreatorError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'InvalidCreator'
  constructor() {
    super('Invalid creator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCreatorError)
    }
  }
}

createErrorFromCodeLookup.set(0x178b, () => new InvalidCreatorError())
createErrorFromNameLookup.set('InvalidCreator', () => new InvalidCreatorError())

/**
 * InvalidOperator: 'Invalid operator'
 *
 * @category Errors
 * @category generated
 */
export class InvalidOperatorError extends Error {
  readonly code: number = 0x178c
  readonly name: string = 'InvalidOperator'
  constructor() {
    super('Invalid operator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidOperatorError)
    }
  }
}

createErrorFromCodeLookup.set(0x178c, () => new InvalidOperatorError())
createErrorFromNameLookup.set(
  'InvalidOperator',
  () => new InvalidOperatorError()
)

/**
 * InvalidCreatorLPTokenAccount: 'Invalid creator lp token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCreatorLPTokenAccountError extends Error {
  readonly code: number = 0x178d
  readonly name: string = 'InvalidCreatorLPTokenAccount'
  constructor() {
    super('Invalid creator lp token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCreatorLPTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178d,
  () => new InvalidCreatorLPTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidCreatorLPTokenAccount',
  () => new InvalidCreatorLPTokenAccountError()
)

/**
 * NotMatchAmount: 'Not match amount'
 *
 * @category Errors
 * @category generated
 */
export class NotMatchAmountError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'NotMatchAmount'
  constructor() {
    super('Not match amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotMatchAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x178e, () => new NotMatchAmountError())
createErrorFromNameLookup.set('NotMatchAmount', () => new NotMatchAmountError())

/**
 * InsufficientSol: 'Insufficient sol'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientSolError extends Error {
  readonly code: number = 0x178f
  readonly name: string = 'InsufficientSol'
  constructor() {
    super('Insufficient sol')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientSolError)
    }
  }
}

createErrorFromCodeLookup.set(0x178f, () => new InsufficientSolError())
createErrorFromNameLookup.set(
  'InsufficientSol',
  () => new InsufficientSolError()
)

/**
 * InvalidTokenReserves: 'Invalid token reserves'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenReservesError extends Error {
  readonly code: number = 0x1790
  readonly name: string = 'InvalidTokenReserves'
  constructor() {
    super('Invalid token reserves')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenReservesError)
    }
  }
}

createErrorFromCodeLookup.set(0x1790, () => new InvalidTokenReservesError())
createErrorFromNameLookup.set(
  'InvalidTokenReserves',
  () => new InvalidTokenReservesError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
